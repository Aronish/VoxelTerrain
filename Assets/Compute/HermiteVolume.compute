#pragma kernel GenerateHermiteVolume

#include "Include/Noise.hlsl"
#include "Include/SDF.hlsl"
#include "Include/HermiteSample.hlsl"
#include "Include/HermiteVolume.hlsl"
#include "Include/VoxelVolume.hlsl"

float wavelength;
uint numberOfOctaves;
Buffer<float3> octaveOffsets;
float persistence;
float lacunarity;
float height;

float4 GenerateHeight(float3 position)
{
    SimplexNoise2D noise;
    float4 value_gradient = GenerateFBMNoise(noise, position, numberOfOctaves, octaveOffsets, 1.0f / wavelength, persistence, lacunarity);

    value_gradient *= -height;
    value_gradient.x += position.y;
    value_gradient.z += 1.0f;

    return value_gradient;
}

[numthreads(4, 4, 4)]
void GenerateHermiteVolume(uint3 hermiteID: SV_DispatchThreadID)
{
    if (IsOutOfHermiteBounds(hermiteID))
    {
        return;
    }

    float3 worldPosition = VoxelVolumeToWorldSpace(VoxelToVoxelVolumeSpace(hermiteID));

    float4 cube = Cube(worldPosition, float3(0.0f, 2.5f, 0.0f), float3(15.0f, 3.0f, 20.0f));
    float4 sphere1 = Sphere(worldPosition, float3(0.0f, 2.5f, 0.0f), 2.0f);
    float4 sphere2 = Sphere(worldPosition, float3(0.0f, 2.5f, 0.0f), 5.0f);

    float4 value_gradient = Union(sphere1, Difference(SmoothUnion(GenerateHeight(worldPosition), cube, 2.0f), sphere2));

    hermiteVolume[CalculateHermiteIndex(hermiteID)] = HermiteSampleConstructor(value_gradient.x, value_gradient.yzw);
}